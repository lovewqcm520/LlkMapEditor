<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   creationComplete="init()"
					   width="860" height="700">
	<fx:Style source="LlkMapEditor.css"/>
	<fx:Declarations>
		<s:RadioButtonGroup id="tileRadioGroup"/>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script> 
		<![CDATA[ 
			import com.jack.control.events.EditorEvent;
			import com.jack.control.events.EventController;
			import com.jack.util.Delay;
			import com.jack.util.DrawUtil;
			import com.jack.util.NumberUtil;
			import com.jack.view.module.MapPanel;
			import com.jack.view.module.ProjectConfigPanel;
			import com.jack.vo.MapVO;
			import com.jack.vo.ProjectVO;
			
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			
			import spark.events.IndexChangeEvent;
			
			private var EMPTY_COLOR:uint = 0xffffff;
			private var ITEM_COLOR:uint = 0x00ff00;
			private var TAG_EMPTY:int = -1;
			private var COL_DEFAULT:int = 8;
			private var ROW_DEFAULT:int = 8;
			private var ITEMS_DEFAULT:int = 8;
			
			public var mapCol:int;
			public var mapRow:int;
			private var nExistItems:int;
			private var curColorSelected:uint = EMPTY_COLOR;

			private var map:MapVO; 

			private var file:FileReference;

			private var mapPanel:MapPanel;
			
			public function init():void
			{
				map = new MapVO();			
				
				// default selected item mode
				itemRadio.selected = true;
				curColorSelected = ITEM_COLOR;
				
				
				EventController.e.addEventListener(EditorEvent.CREATE_PROJECT, onCreateProject);
				
				addEventListener(MouseEvent.MOUSE_UP, onStageMouseUp);
				addEventListener(Event.DEACTIVATE, onDeactivate);
			}
			
			protected function onStageMouseUp(event:MouseEvent):void
			{
				if(mapPanel)
				{
					mapPanel.disableEditContainerMouse();
				}
			}
			
			protected function onDeactivate(event:Event):void
			{
				if(mapPanel)
				{
					mapPanel.disableEditContainerMouse();
				}
			}
			
			protected function onGenerateMap(event:MouseEvent):void
			{
				var w:int = int(widthTxt.text);
				var h:int = int(heightTxt.text);
				
				// can not be odd
				if(w >0 && h > 0 && 
					((w*h)&1) == 0)
				{
					mapCol = w;
					mapRow = h;
					DrawUtil.drawGridding(w, h);
					map.setMapSize(mapCol, mapRow);
				}
			}
			
			protected function onEmptyItemRadioSelected(event:MouseEvent):void
			{
				curColorSelected = EMPTY_COLOR;
			}
			
			protected function onPokerRadioSelected(event:MouseEvent):void
			{
				curColorSelected = ITEM_COLOR;
			}
			
			protected function onToolRadioSelected(event:MouseEvent):void
			{
				curColorSelected = ITEM_COLOR;
			}
			
			protected function onSaveMap(event:MouseEvent):void
			{
				if(nExistItems == 0 || !NumberUtil.isEven(nExistItems))
				{
					Alert.show("Items must be even number!", "Error!",4, test);
					return;
				}
				var xml:XML = map.exportAsXML();
				var file:FileReference = new FileReference();
				file.save(xml, "map.xml");
			}
			
			protected function onClearMap(event:MouseEvent):void
			{
				DrawUtil.clear();
				nExistItems = 0;
			}
			
			protected function onRandomGenerateMap(event:MouseEvent):void
			{
				//map.random(0, 0);
				nExistItems = 0;
				
				for (var i:int = 0; i < mapCol; i++) 
				{
					for (var j:int = 0; j < mapRow; j++) 
					{
						var n:int = map.getItem(i, j);
						// draw map
						
						// update the map data
						if(n < 0)
						{
							DrawUtil.colorTile(i, j, EMPTY_COLOR);
							map.setItem(i, j, -1);
							nExistItems--;
						}
						else
						{
							DrawUtil.colorTile(i, j, ITEM_COLOR);
							map.setItem(i, j, 1);
							nExistItems++;
						}
					}					
				}				
			}

			private function colorTiles(i:int, j:int, color:uint):void
			{
				if(map.getItem(i, j) == 1 && color != EMPTY_COLOR)
				{
					return;
				}
				if(map.getItem(i, j) == -1 && color == EMPTY_COLOR)
				{
					return;
				}
				// draw map
				DrawUtil.colorTile(i, j, color);
				// update the map data
				if(color == EMPTY_COLOR)
				{
					map.setItem(i, j, -1);
					nExistItems--;
				}
				else
				{
					map.setItem(i, j, 1);
					nExistItems++;
				}
			}
		
			
			protected function onOpenMap(event:MouseEvent):void
			{
				var file:FileReference = new FileReference();
				file.addEventListener(Event.SELECT, onFileSelected);
				var swfTypeFilter:FileFilter=new FileFilter("txt Files", "*.txt;");
				file.browse([swfTypeFilter]);
			}
			
			protected function onFileSelected(event:Event):void
			{
				file = event.currentTarget as FileReference;
				//content.picTxt.text=fileReference.name;
				file.addEventListener(Event.COMPLETE, onFileLoaded);
				
				Delay.doIt(10, loadMapFile)
			}
			
			private function loadMapFile():void
			{
				file.load();
			}
			
			private function onFileLoaded(e:Event):void
			{
				var file:FileReference=e.target as FileReference;
				file.removeEventListener(Event.COMPLETE, onFileLoaded);
				var bytearray:ByteArray=file.data;
				var mapStr:String = bytearray.readUTFBytes(bytearray.length);
				
				// update the map
				//refreshMap();
			}
			
			
			protected function onTopBarSelecteChange(event:IndexChangeEvent):void
			{
				trace("onTopBarSelecteChange", event.oldIndex, event.newIndex);			
			}
			
			protected function onTopBarClick(event:MouseEvent):void
			{
			}
			
			protected function onNewProjectClick(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
				var newProjectConfigPanel:ProjectConfigPanel = new ProjectConfigPanel();
				newProjectConfigPanel.x = (width-newProjectConfigPanel.width)/2;
				newProjectConfigPanel.y = (height-newProjectConfigPanel.height)/2;
				PopUpManager.addPopUp(newProjectConfigPanel, this, true);
			}
			
			protected function onOpenProjectClick(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function onSaveProjectClick(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function onExportDataClick(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function onCreateProject(event:EditorEvent):void
			{
				// TODO Auto-generated method stub
				trace(event.params);
				
				mapPanel = new MapPanel();
				mapPanel.x = 15;
				mapPanel.y = 65;
				PopUpManager.addPopUp(mapPanel, this, true);
				mapPanel.createNewProject(event.params as ProjectVO);
			}
			

			
		]]>
	</fx:Script>
	<s:VGroup id="itemSelectGroup" x="682" y="66" width="81" height="74">
		<s:TextInput id="widthTxt" width="81"/>
		<s:TextInput id="heightTxt" width="81"/>
		<s:Button id="generateBtn" label="generate" click="onGenerateMap(event)"/>
		<s:RadioButton id="emptyItemRadio" label="empty" click="onEmptyItemRadioSelected(event)"
					   groupName="tileRadioGroup"/>
		<s:RadioButton id="itemRadio" width="67" height="17" label="poker" click="onPokerRadioSelected(event)"
					   groupName="tileRadioGroup"/>
		<s:RadioButton id="toolRadio" width="67" height="17" label="tool" click="onToolRadioSelected(event)"
					   groupName="tileRadioGroup"/>
		<s:Button id="clearBtn" label="clear" click="onClearMap(event)"/>
		<s:Button id="randomBtn" label="random" click="onRandomGenerateMap(event)"/>
		<s:Label width="62" height="22" fontSize="20" text="width"/>
		<s:Label width="62" height="22" fontSize="20" text="height"/>
		<s:TextInput id="itemTxt" width="42"/>
		<s:TextInput id="toolTxt" width="39"/>
	</s:VGroup>
	<s:Button id="saveBtn" x="560" y="148" label="Save" click="onSaveMap(event)"/>
	<mx:Canvas id="test" x="19" y="66" width="484" height="389">
	</mx:Canvas>
	<s:Button id="openMapBtn" x="560" y="196" label="Open" click="onOpenMap(event)"/>
	
	
	<s:HGroup x="14" y="10" width="655" height="48" gap="0" verticalAlign="middle">
		<s:Button id="newProjectBtn" width="136" height="34" label="New Project"
				  click="onNewProjectClick(event)" fontFamily="Courier New"
				  icon="assets/image 201.png" toolTip="Create a new project"/>
		<s:Button id="openProjectBtn" width="136" height="34" label="Open Project"
				  click="onOpenProjectClick(event)" fontFamily="Courier New"
				  icon="assets/image 237.png" toolTip="Open a existing project"/>
		<s:Button id="saveProjectBtn" width="136" height="34" label="Save Project"
				  click="onSaveProjectClick(event)" fontFamily="Courier New"
				  icon="assets/image 221.png" toolTip="Save current project"/>
		<s:Button id="exportDataBtn" width="136" height="34" label="Export Data"
				  click="onExportDataClick(event)" fontFamily="Courier New"
				  icon="assets/image 194.png" toolTip="Export data"/>
	</s:HGroup>
		
	
	
</s:WindowedApplication>
